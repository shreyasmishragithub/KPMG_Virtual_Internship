# -*- coding: utf-8 -*-
"""KPMG Virtual Internship.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_7UZtLqR0cGTvCBG75L1Ce5rWICE8BkN
"""

import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile

transactions = pd.read_excel(r"C:\Users\CCECC\Downloads\KPMG_VI_New_raw_data_update_final.xlsx", sheet_name='Transactions')
new_customer_lists = pd.read_excel(r"C:\Users\CCECC\Downloads\KPMG_VI_New_raw_data_update_final.xlsx", sheet_name='NewCustomerList')
customer_demographic = pd.read_excel(r"C:\Users\CCECC\Downloads\KPMG_VI_New_raw_data_update_final.xlsx", sheet_name='CustomerDemographic')
customer_add = pd.read_excel(r"C:\Users\CCECC\Downloads\KPMG_VI_New_raw_data_update_final.xlsx", sheet_name='CustomerAddress')

"""# Exploring the Transactions Dataset"""

#print first five rows
transactions.head()

transactions.info()

"""The 'transaction_date' and 'product_first_sold_date' columns are stored as integers. Both colums should be changed to date."""

#convert date columns from integer to datetime
transactions['transaction_date'] = pd.to_datetime(transactions['transaction_date'], unit='s')
transactions['transaction_date'].head()

#convert date columns from integer to datetime
transactions['product_first_sold_date'] = pd.to_datetime(transactions['product_first_sold_date'], unit='s')
transactions['product_first_sold_date'].head()

"""The integers in the date columns are not correct as it shows everything happening the same day at different times. We would need to refer back to the author of the data to seek more clasrification on how the data was collected."""

transactions.describe()

"""# Exploring Missing Values"""

#identify missing values
transactions.isnull().sum()

"""We can decide to drop missing values depending on the objective of our analysis.

# Identifying Duplicate Values
"""

dups = transactions.duplicated()
transactions[dups].sum()

"""# Exploring Columns"""

transactions.columns

transactions['order_status'].value_counts()

transactions['brand'].value_counts()

transactions['product_line'].value_counts()

transactions['product_class'].value_counts()

transactions['product_size'].value_counts()

"""All the columns appear to have consistent and correct information.

# Exploring New Customer List Dataset
"""

new_customer_lists.head()

new_customer_lists.info()

# Drop Unnamed Column
cols = ['Unnamed: 16','Unnamed: 17','Unnamed: 18','Unnamed: 19','Unnamed: 20']
new_customer_lists = new_customer_lists.drop(cols, axis=1)

# Check for null values
new_customer_lists.isnull().sum()

"""We will decide what to do with the missing values based on the objective of our analysis."""

# Checking for duplicate values
new_customer_lists.duplicated().sum()

"""There are no duplicate values in the dataset

# Explore Columns
"""

new_customer_lists['gender'].value_counts()

# Replace 'U' with 'Unspecified'
new_customer_lists['gender'].str.replace('U','Unspecified')

new_customer_lists['DOB'].describe()

"""# Exploring Customer Demographic"""

customer_demographic.head()

customer_demographic['default'].value_counts()

"""Values in the default column dont arent correct, we would drop the column"""

customer_demographic = customer_demographic.drop('default', axis=1)

customer_demographic.head()

customer_demographic.info()

customer_demographic['gender'].value_counts()

"""Gender column has inconsistent values, we need to replace them with their appropriate values."""

# Replace inconsistent values with appropriate values
customer_demographic['gender'] = customer_demographic['gender'].replace('F','Female').replace('M','Male').replace('Femal','Female').replace('U','Unspecified')

customer_demographic['gender'].value_counts()

"""# Merge all customer information from three tables into one table

Both datasets contain the same values about customers, so it is advisable to merge them into one table for our analysis
"""

new_customer_lists.head()

customer_demographic['customer_id'].iloc[-1]

"""We need to add 'Customer Id' column to new_customer_lists to enable us merge the tables vertically"""

new_customer_lists.insert(0, 'customer_id', range(4001, 4001 + len(new_customer_lists)))

new_customer_lists.head()

customer_demographic.head()

"""We need to merge the Customer Demographic with the Customer Address table before joining with New Customer List"""

customer_add.head()

# Merge dataframes using the customer_id column
customer_demographic = pd.merge(customer_demographic, customer_add, how='left', on='customer_id')

customer_demographic.head()

customer_demographic = customer_demographic.drop(['address_x','postcode_x','state_x','country_x','property_valuation_x'], axis=1)

customer_demographic.head()

new_customer_lists.head()

new_df = pd.concat([customer_demographic, new_customer_lists], ignore_index=True, sort=False)

new_df

"""We would assign the new dataframe to customer demographic where we will use one dataframe to capture all the customer information"""

customer_demographic = new_df

customer_demographic

